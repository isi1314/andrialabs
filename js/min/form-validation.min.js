/**
* ANDRIA LABS FORM VALIDATION
*
* Comprehensive form validation with real-time feedback
* WCAG 2.1 compliant error messaging
*
* Features:
* - Real-time validation on blur
* - Inline error messages
* - ARIA live regions for screen readers
* - Email format validation
* - Required field validation
* - Character limits
*/
(function() {
'use strict';
const validationRules = {
email: {
pattern: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
message: 'Please enter a valid email address'
},
required: {
message: 'This field is required'
},
minLength: {
default: 2,
message: 'Must be at least {min} characters'
}
};
document.addEventListener('DOMContentLoaded', function() {
initFormValidation();
});
function initFormValidation() {
const forms = document.querySelectorAll('.contact-form, .newsletter-form');
forms.forEach(form => {
form.setAttribute('novalidate', 'true');
createLiveRegion(form);
const inputs = form.querySelectorAll('input, textarea, select');
inputs.forEach(input => {
addInputValidation(input);
});
form.addEventListener('submit', handleFormSubmit);
});
}
function createLiveRegion(form) {
const liveRegion = document.createElement('div');
liveRegion.setAttribute('role', 'status');
liveRegion.setAttribute('aria-live', 'polite');
liveRegion.setAttribute('aria-atomic', 'true');
liveRegion.className = 'sr-only';
liveRegion.id = 'form-status-' + Math.random().toString(36).substr(2, 9);
form.appendChild(liveRegion);
}
function addInputValidation(input) {
if (input.dataset.validationInitialized) return;
input.dataset.validationInitialized = 'true';
input.addEventListener('blur', function() {
validateField(input);
});
input.addEventListener('input', function() {
if (input.classList.contains('error')) {
clearFieldError(input);
}
});
}
function validateField(input) {
const value = input.value.trim();
const isRequired = input.hasAttribute('required');
const type = input.type;
if (isRequired && !value) {
showFieldError(input, validationRules.required.message);
return false;
}
if (!isRequired && !value) {
clearFieldError(input);
return true;
}
if (type === 'email') {
if (!validationRules.email.pattern.test(value)) {
showFieldError(input, validationRules.email.message);
return false;
}
}
if ((type === 'text' || input.tagName === 'TEXTAREA') && value.length > 0) {
const minLength = input.dataset.minLength || validationRules.minLength.default;
if (value.length < minLength) {
const message = validationRules.minLength.message.replace('{min}', minLength);
showFieldError(input, message);
return false;
}
}
clearFieldError(input);
return true;
}
function showFieldError(input, message) {
input.classList.add('error');
input.setAttribute('aria-invalid', 'true');
let errorElement = input.parentElement.querySelector('.error-message');
if (!errorElement) {
errorElement = document.createElement('div');
errorElement.className = 'error-message';
errorElement.setAttribute('role', 'alert');
errorElement.style.cssText = 'color: var(--color-error, #C41E1E); font-size: 14px; margin-top: 4px;';
input.parentElement.appendChild(errorElement);
}
errorElement.textContent = message;
const liveRegion = input.closest('form').querySelector('[role="status"]');
if (liveRegion) {
liveRegion.textContent = message;
}
}
function clearFieldError(input) {
input.classList.remove('error');
input.removeAttribute('aria-invalid');
const errorElement = input.parentElement.querySelector('.error-message');
if (errorElement) {
errorElement.remove();
}
}
function handleFormSubmit(event) {
event.preventDefault();
const form = event.target;
const inputs = form.querySelectorAll('input, textarea, select');
const submitButton = form.querySelector('[type="submit"]');
let isValid = true;
let firstInvalidInput = null;
inputs.forEach(input => {
if (!validateField(input) && isValid) {
isValid = false;
firstInvalidInput = input;
}
});
if (!isValid) {
if (firstInvalidInput) {
firstInvalidInput.focus();
}
const liveRegion = form.querySelector('[role="status"]');
if (liveRegion) {
liveRegion.textContent = 'Form has errors. Please correct them and try again.';
}
return;
}
showFormLoading(form, submitButton);
const liveRegion = form.querySelector('[role="status"]');
if (liveRegion) {
liveRegion.textContent = 'Submitting form, please wait...';
}
form.submit();
}
function showFormLoading(form, submitButton) {
const inputs = form.querySelectorAll('input, textarea, select, button');
inputs.forEach(input => {
input.disabled = true;
input.classList.add('loading');
});
if (submitButton) {
const originalText = submitButton.value || submitButton.textContent;
submitButton.dataset.originalText = originalText;
if (submitButton.tagName === 'INPUT') {
submitButton.value = 'Submitting...';
} else {
submitButton.innerHTML = '<span class="loading-spinner"></span> Submitting...';
}
submitButton.classList.add('loading');
}
form.classList.add('form-loading');
}
const style = document.createElement('style');
style.textContent = `
/* Screen reader only class */
.sr-only {
position: absolute;
width: 1px;
height: 1px;
padding: 0;
margin: -1px;
overflow: hidden;
clip: rect(0, 0, 0, 0);
white-space: nowrap;
border-width: 0;
}
/* Error state for inputs */
input.error,
textarea.error,
select.error {
border-color: var(--color-error, #C41E1E) !important;
box-shadow: 0 0 0 1px var(--color-error, #C41E1E) !important;
}
/* Error message styling */
.error-message {
color: var(--color-error, #C41E1E);
font-size: 14px;
margin-top: 4px;
display: flex;
align-items: center;
gap: 4px;
}
.error-message::before {
content: 'âš ';
font-size: 16px;
}
/* Success state (optional) */
input.success,
textarea.success {
border-color: var(--color-success, #4caf50) !important;
}
/* Focus state enhancement for errors */
input.error:focus,
textarea.error:focus,
select.error:focus {
outline: 2px solid var(--color-error, #C41E1E) !important;
outline-offset: 2px;
}
/* Loading states */
input.loading,
textarea.loading,
select.loading,
button.loading {
opacity: 0.6;
cursor: not-allowed;
pointer-events: none;
}
.form-loading {
position: relative;
}
.form-loading::after {
content: '';
position: absolute;
top: 0;
left: 0;
right: 0;
bottom: 0;
background: rgba(0, 0, 0, 0.1);
border-radius: 8px;
pointer-events: none;
}
/* Loading spinner */
.loading-spinner {
display: inline-block;
width: 14px;
height: 14px;
border: 2px solid rgba(0, 0, 0, 0.1);
border-top-color: currentColor;
border-radius: 50%;
animation: spin 0.6s linear infinite;
}
@keyframes spin {
to { transform: rotate(360deg); }
}
/* Submit button loading state */
[type="submit"].loading,
.submit-button.loading {
opacity: 0.7;
cursor: wait;
display: flex;
align-items: center;
justify-content: center;
gap: 8px;
}
`;
document.head.appendChild(style);
})();
